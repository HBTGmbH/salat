package org.tb.bdom;

import java.io.Serializable;
import java.sql.Date;
import java.util.List;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.tb.GlobalConstants;


/**
 * Bean for table 'Employeecontract'.
 * 
 * @author oda
 */
@Entity
public class Employeecontract implements Serializable {

	private static final long serialVersionUID = 1L;

	/**
	 * Autogenerated technical object id.
	 */	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	private long id;
	
	/** valid from date */
	private Date validFrom;
	
	/** valid until date */
	private Date validUntil;
	
	/** daily working time */
	private Double dailyWorkingTime;
	
	/** freelancer y/n */
	private Boolean freelancer;
	
	/** task description */
	private String taskDescription;
	
	/** fixed until date */
	private Date fixedUntil;
	
	/** Employee */
	@OneToOne
	@JoinColumn(name="EMPLOYEE_ID")
	@Cascade(value = { CascadeType.SAVE_UPDATE })
	private Employee employee;
	
	/** list of timereports, associated to this employeecontract */
	@OneToMany(mappedBy = "employeecontract")
	@Cascade(value = { CascadeType.SAVE_UPDATE })
	private List<Timereport> timereports;

	/** list of employeeorders, associated to this employeecontract */
	@OneToMany(mappedBy = "employeecontract")
	@Cascade(value = { CascadeType.SAVE_UPDATE })
	private List<Employeeorder> employeeorders;
	
	/** list of monthlyreports, associated to this employeecontract */
	@OneToMany(mappedBy = "employeecontract")
	@Cascade(value = { CascadeType.SAVE_UPDATE })
	private List<Monthlyreport> monthlyreports;
	
	/** list of vacations, associated to this employeecontract */
	@OneToMany(mappedBy = "employeecontract")
	@Cascade(value = { CascadeType.SAVE_UPDATE })
	private List<Vacation> vacations;
	
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public Double getDailyWorkingTime() {
		return dailyWorkingTime;
	}

	public void setDailyWorkingTime(Double dailyWorkingTime) {
		this.dailyWorkingTime = dailyWorkingTime;
	}
	
	public Boolean getFreelancer() {
		return freelancer;
	}

	public void setFreelancer(Boolean freelancer) {
		this.freelancer = freelancer;
	}

	public String getTaskDescription() {
		return taskDescription;
	}

	public void setTaskDescription(String taskDescription) {
		this.taskDescription = taskDescription;
	}

	public Date getFixedUntil() {
		return fixedUntil;
	}

	public void setFixedUntil(Date fixedUntil) {
		this.fixedUntil = fixedUntil;
	}

	public Date getValidFrom() {
		return validFrom;
	}

	public void setValidFrom(Date validFrom) {
		this.validFrom = validFrom;
	}

	public Date getValidUntil() {
		return validUntil;
	}

	public void setValidUntil(Date validUntil) {
		this.validUntil = validUntil;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public List<Timereport> getTimereports() {
		return timereports;
	}

	public void setTimereports(List<Timereport> timereports) {
		this.timereports = timereports;
	}

	public List<Employeeorder> getEmployeeorders() {
		return employeeorders;
	}

	public void setEmployeeorders(List<Employeeorder> employeeorders) {
		this.employeeorders = employeeorders;
	}

	public List<Monthlyreport> getMonthlyreports() {
		return monthlyreports;
	}

	public void setMonthlyreports(List<Monthlyreport> monthlyreports) {
		this.monthlyreports = monthlyreports;
	}

	public List<Vacation> getVacations() {
		return vacations;
	}

	public void setVacations(List<Vacation> vacations) {
		this.vacations = vacations;
	}

	public Integer getVacationEntitlement() {
		if ((vacations != null) && (vacations.size() > 0)) {
			// actually, vacation entitlement is a constant value
			// for an employee (not year-dependent), so just take the
			// first vacation entry to get the value
			return vacations.get(0).getEntitlement();
		}
		else {
			return GlobalConstants.VACATION_PER_YEAR;
		}
	}
	
}
