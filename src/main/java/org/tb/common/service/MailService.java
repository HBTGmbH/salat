package org.tb.common.service;

import jakarta.mail.internet.MimeMessage;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.Singular;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

/**
 * Builds the various emails
 *
 * @author la
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class MailService {

  private final JavaMailSender mailSender;

  public void sendEmail(String subject, String message, MailContact from, MailContact to) {
    sendEmail(EmailRequest.builder()
        .subject(subject)
        .message(message)
        .from(from)
        .to(to)
        .build());
  }

  public void sendEmail(EmailRequest request) {
    try {
      StringBuilder emailMessage = new StringBuilder(request.getMessage());
      if (request.isAppendAutoGeneratedFooter()) {
        emailMessage.append("\n\n");
        emailMessage.append("__________________________");
        emailMessage.append("\n\n");
        emailMessage.append("(Dies ist eine automatisch erzeugte Email.)");
      }

      MimeMessage mimeMessage = mailSender.createMimeMessage();
      MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");

      helper.setFrom(request.getFrom().getEmail(), request.getFrom().getName());
      helper.setSubject(request.getSubject());
      helper.setText(emailMessage.toString(), false);

      // Add primary recipient
      helper.setTo(request.getTo().getEmail());

      // Add additional recipients if present
      if (request.getAdditionalRecipients() != null && !request.getAdditionalRecipients().isEmpty()) {
        for (MailContact recipient : request.getAdditionalRecipients()) {
          helper.addTo(recipient.getEmail());
        }
      }

      // Add attachments if present
      if (request.getAttachments() != null && !request.getAttachments().isEmpty()) {
        for (EmailAttachment attachment : request.getAttachments()) {
          ByteArrayResource resource = new ByteArrayResource(attachment.getData());
          helper.addAttachment(attachment.getFileName(), resource, attachment.getContentType());
        }
      }

      mailSender.send(mimeMessage);
      log.info("Email sent successfully to {} with subject: {}", request.getTo().getEmail(), request.getSubject());

    } catch (Exception e) {
      log.error("Could not send Email to {}, subject: {}", request.getTo().getEmail(), request.getSubject(), e);
      throw new RuntimeException("Failed to send email", e);
    }
  }

  @Data
  @RequiredArgsConstructor
  public static class MailContact {
    private final String name;
    private final String email;
  }

  @Data
  @Builder
  public static class EmailRequest {
    private String subject;
    private String message;
    private MailContact from;
    private MailContact to;

    @Singular
    private List<MailContact> additionalRecipients;

    @Singular
    private List<EmailAttachment> attachments;

    @Builder.Default
    private boolean appendAutoGeneratedFooter = true;
  }

  @Data
  @AllArgsConstructor
  public static class EmailAttachment {
    private String fileName;
    private byte[] data;
    private String contentType;
  }

}
