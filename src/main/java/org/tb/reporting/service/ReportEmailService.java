package org.tb.reporting.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.tb.common.service.MailService;
import org.tb.common.service.MailService.EmailAttachment;
import org.tb.common.service.MailService.EmailRequest;
import org.tb.common.service.MailService.MailContact;
import org.tb.common.util.DateUtils;
import org.tb.reporting.domain.ReportDefinition;
import org.tb.reporting.domain.ReportResult;

@Slf4j
@Service
@RequiredArgsConstructor
public class ReportEmailService {

  private final ExcelExportService excelExportService;
  private final ReportingService reportingService;
  private final MailService mailService;

  @Value("${salat.reporting.email.from:noreply@salat.local}")
  private String fromAddress;

  @Value("${salat.reporting.email.enabled:true}")
  private boolean emailEnabled;

  public void sendReportEmail(Long reportDefinitionId, Map<String, Object> parameters, String[] recipients) {
    try {
      if (!emailEnabled) {
        log.info("Email sending is disabled. Skipping report email for report ID: {}", reportDefinitionId);
        return;
      }

      log.info("Generating report {} with parameters: {}", reportDefinitionId, parameters);
      ReportDefinition reportDefinition = reportingService.getReportDefinition(reportDefinitionId);
      ReportResult reportResult = reportingService.execute(reportDefinitionId, parameters);

      if(reportResult.getRows().isEmpty()) {
        log.info("Report id={}, name={} returned no rows. Skipping email.", reportDefinitionId, reportDefinition.getName());
        return;
      }

      byte[] excelBytes = excelExportService.exportToExcel(reportResult);

      String emailBody = buildEmailBody(reportDefinition, reportResult, parameters);
      String fileName = createFileName(reportDefinition);

      MailContact from = new MailContact("Salat Reporting", fromAddress);
      MailContact primaryRecipient = new MailContact("", recipients[0].trim());

      List<MailContact> additionalRecipients = new ArrayList<>();
      for (int i = 1; i < recipients.length; i++) {
        additionalRecipients.add(new MailContact("", recipients[i].trim()));
      }

      EmailRequest emailRequest = EmailRequest.builder()
          .subject("Automated Report: " + reportDefinition.getName())
          .message(emailBody)
          .from(from)
          .to(primaryRecipient)
          .additionalRecipients(additionalRecipients)
          .attachment(new EmailAttachment(
              fileName,
              excelBytes,
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
          ))
          .appendAutoGeneratedFooter(false)
          .build();

      mailService.sendEmail(emailRequest);
      log.info("Report email sent successfully to {} recipients for report: {}", recipients.length, reportDefinition.getName());

    } catch (Exception e) {
      log.error("Failed to send report email for report ID: {}", reportDefinitionId, e);
      throw new RuntimeException("Failed to send report email", e);
    }
  }

  private String buildEmailBody(ReportDefinition reportDefinition, ReportResult reportResult, Map<String, Object> parameters) {
    StringBuilder body = new StringBuilder();
    body.append("Guten Tag,\n\n");
    body.append("anbei erhalten Sie den automatisch generierten Report: ").append(reportDefinition.getName()).append("\n\n");
    body.append("Report-Details:\n");
    body.append("- Anzahl Zeilen: ").append(reportResult.getRows().size()).append("\n");
    body.append("- Generiert am: ").append(DateUtils.formatDateTime(DateUtils.now(), "dd.MM.yyyy HH:mm")).append("\n");

    if (!parameters.isEmpty()) {
      body.append("- Parameter:\n");
      parameters.forEach((key, value) -> body.append("  * ").append(key).append(": ").append(value).append("\n"));
    }

    body.append("\nDie Ergebnisse befinden sich im angehängten Excel-Dokument.\n\n");
    body.append("Mit freundlichen Grüßen\n");
    body.append("Ihr Salat Reporting System");

    return body.toString();
  }

  private String createFileName(ReportDefinition reportDefinition) {
    var fileName = "report-" + reportDefinition.getName() +
                   "-erzeugt-" + DateUtils.formatDateTime(DateUtils.now(), "dd-MM-yy-HHmm") +
                   ".xlsx";
    return fileName.replaceAll("[^a-zA-Z0-9-_\\.]", "_");
  }

}
